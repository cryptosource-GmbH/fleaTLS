

AS      = $(GCC_BIN)arm-none-eabi-as
CC      = $(GCC_BIN)arm-none-eabi-gcc
CPP     = $(GCC_BIN)arm-none-eabi-g++
LD      = $(GCC_BIN)arm-none-eabi-gcc
OBJCOPY = $(GCC_BIN)arm-none-eabi-objcopy
OBJDUMP = $(GCC_BIN)arm-none-eabi-objdump
SIZE    = $(GCC_BIN)arm-none-eabi-size 
###################################################

# Check for valid float argument
ifneq ($(FLOAT_TYPE), hard)
ifneq ($(FLOAT_TYPE), soft)
#override FLOAT_TYPE = hard
override FLOAT_TYPE = soft
endif
endif

###################################################

#INCLUDES = -Iinclude -Iinclude/api -Itest/include -I./build_cfg/general -I./build_cfg/pltf_spec/32bit_default 
INCLUDES = -Iinclude -Iinclude/api -Itest/include -I./build_cfg/lpc1768 -I./build_cfg/pltf_spec/32bit_default 

vpath %.c src/common/asn1 src/common/streams src/common src/common/hash src/common/math src/common/pk_enc src/user src/common/tls pltf_support/workaround_lpc/src

SRC_DIRS = src/common/asn1 src/common/streams src/common src/common/hash src/common/math src/common/pk_enc src/user src/common/tls pltf_support/workaround_lpc/src

#CFLAGS  = -O3 -g -Wall -std=c99
CFLAGS  = -Wall -std=c99 # -Os add about 1/4 of running time compared to -O3

#-g 
CFLAGS += $(INCLUDES) -DFLEA_PLTF_ARM_32BIT
#CFLAGS += -finline-functions -O3 -fomit-frame-pointer 
CFLAGS += -mlittle-endian -mthumb -mcpu=cortex-m3
#CFLAGS += -mthumb -mcpu=cortex-m3

#CFLAGS += -ffreestanding -nostdlib -MMD -MP
CFLAGS += -MMD #-MP
#CFLAGS += -MMD -MP

# allow discarding of unused code during linking:
CFLAGS += -fdata-sections -ffunction-sections

ifeq ($(FLOAT_TYPE), hard)
CFLAGS += -fsingle-precision-constant -Wdouble-promotion
CFLAGS += -mfpu=fpv4-sp-d16 -mfloat-abi=hard
#CFLAGS += -mfpu=fpv4-sp-d16 -mfloat-abi=softfp
else
CFLAGS += -msoft-float
endif

#CFLAGS += -Iinc -Iinc/core -Iinc/peripherals

#LD_FLAGS =-Wl,--gc-sections -mcpu=cortex-m3 -mthumb 
#LD_SYS_LIBS = -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys

SRC_DIR = src



SRCS := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.c))
#$(info $$SRCS is [${SRCS}])

OBJDIR = build/cortex_m3
OBJS_RAW = $(SRCS:.c=.o)

OBJS = $(addprefix $(OBJDIR)/, $(OBJS_RAW))

DEPS_RAW = $(SRCS:.c=.d)

DEPS = $(addprefix $(OBJDIR)/, $(DEPS_RAW))


	
.PHONY: libflea_cortex_m3.a

all: libflea_cortex_m3.a 

# $< = "prerequisite": right hand side in target def
# $@ = left hand side of the target def

$(OBJDIR)/%.o : %.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) -c $< -o $@ 
  
libflea_cortex_m3.a: $(OBJS)
	$(AR) -r $@ $(OBJS)
	mv libflea_cortex_m3.a build/

test: libflea_cortex_m3.a
	@echo "making test"
	$(MAKE) -C test FLOAT_TYPE=$(FLOAT_TYPE)

clean:
	rm -f $(OBJS)  build/libflea_cortex_m3.a 
	find $(OBJDIR) -name "*.d" | xargs -n1 trash-put
	$(MAKE) clean -C test

-include $(DEPS)

